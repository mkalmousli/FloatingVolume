// Autogenerated from Pigeon (v25.3.2), do not edit directly.
// See also: https://pub.dev/packages/pigeon
@file:Suppress("UNCHECKED_CAST", "ArrayInDataClass")


import android.util.Log
import io.flutter.plugin.common.BasicMessageChannel
import io.flutter.plugin.common.BinaryMessenger
import io.flutter.plugin.common.EventChannel
import io.flutter.plugin.common.MessageCodec
import io.flutter.plugin.common.StandardMethodCodec
import io.flutter.plugin.common.StandardMessageCodec
import java.io.ByteArrayOutputStream
import java.nio.ByteBuffer
private object NativeEventsPigeonUtils {
}
private open class NativeEventsPigeonCodec : StandardMessageCodec() {
  override fun readValueOfType(type: Byte, buffer: ByteBuffer): Any? {
    return     super.readValueOfType(type, buffer)
  }
  override fun writeValue(stream: ByteArrayOutputStream, value: Any?)   {
    super.writeValue(stream, value)
  }
}

val NativeEventsPigeonMethodCodec = StandardMethodCodec(NativeEventsPigeonCodec())


private class NativeEventsPigeonStreamHandler<T>(
    val wrapper: NativeEventsPigeonEventChannelWrapper<T>
) : EventChannel.StreamHandler {
  var pigeonSink: PigeonEventSink<T>? = null

  override fun onListen(p0: Any?, sink: EventChannel.EventSink) {
    pigeonSink = PigeonEventSink<T>(sink)
    wrapper.onListen(p0, pigeonSink!!)
  }

  override fun onCancel(p0: Any?) {
    pigeonSink = null
    wrapper.onCancel(p0)
  }
}

interface NativeEventsPigeonEventChannelWrapper<T> {
  open fun onListen(p0: Any?, sink: PigeonEventSink<T>) {}

  open fun onCancel(p0: Any?) {}
}

class PigeonEventSink<T>(private val sink: EventChannel.EventSink) {
  fun success(value: T) {
    sink.success(value)
  }

  fun error(errorCode: String, errorMessage: String?, errorDetails: Any?) {
    sink.error(errorCode, errorMessage, errorDetails)
  }

  fun endOfStream() {
    sink.endOfStream()
  }
}
      
abstract class ServiceStatusStreamHandler : NativeEventsPigeonEventChannelWrapper<Boolean> {
  companion object {
    fun register(messenger: BinaryMessenger, streamHandler: ServiceStatusStreamHandler, instanceName: String = "") {
      var channelName: String = "dev.flutter.pigeon.floating_volume.NativeEvents.serviceStatus"
      if (instanceName.isNotEmpty()) {
        channelName += ".$instanceName"
      }
      val internalStreamHandler = NativeEventsPigeonStreamHandler<Boolean>(streamHandler)
      EventChannel(messenger, channelName, NativeEventsPigeonMethodCodec).setStreamHandler(internalStreamHandler)
    }
  }
}
      
abstract class FloatingVolumeVisibilityStreamHandler : NativeEventsPigeonEventChannelWrapper<Boolean> {
  companion object {
    fun register(messenger: BinaryMessenger, streamHandler: FloatingVolumeVisibilityStreamHandler, instanceName: String = "") {
      var channelName: String = "dev.flutter.pigeon.floating_volume.NativeEvents.floatingVolumeVisibility"
      if (instanceName.isNotEmpty()) {
        channelName += ".$instanceName"
      }
      val internalStreamHandler = NativeEventsPigeonStreamHandler<Boolean>(streamHandler)
      EventChannel(messenger, channelName, NativeEventsPigeonMethodCodec).setStreamHandler(internalStreamHandler)
    }
  }
}
      
