// Autogenerated from Pigeon (v25.3.2), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name, unnecessary_import, no_leading_underscores_for_local_identifiers

import 'dart:async';
import 'dart:typed_data' show Float64List, Int32List, Int64List, Uint8List;

import 'package:flutter/foundation.dart' show ReadBuffer, WriteBuffer;
import 'package:flutter/services.dart';


class _PigeonCodec extends StandardMessageCodec {
  const _PigeonCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is int) {
      buffer.putUint8(4);
      buffer.putInt64(value);
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

const StandardMethodCodec pigeonMethodCodec = StandardMethodCodec(_PigeonCodec());

Stream<bool> serviceStatus( {String instanceName = ''}) {
  if (instanceName.isNotEmpty) {
    instanceName = '.$instanceName';
  }
  final EventChannel serviceStatusChannel =
      EventChannel('dev.flutter.pigeon.floating_volume.NativeEvents.serviceStatus$instanceName', pigeonMethodCodec);
  return serviceStatusChannel.receiveBroadcastStream().map((dynamic event) {
    return event as bool;
  });
}
    
Stream<bool> floatingVolumeVisibility( {String instanceName = ''}) {
  if (instanceName.isNotEmpty) {
    instanceName = '.$instanceName';
  }
  final EventChannel floatingVolumeVisibilityChannel =
      EventChannel('dev.flutter.pigeon.floating_volume.NativeEvents.floatingVolumeVisibility$instanceName', pigeonMethodCodec);
  return floatingVolumeVisibilityChannel.receiveBroadcastStream().map((dynamic event) {
    return event as bool;
  });
}
    
